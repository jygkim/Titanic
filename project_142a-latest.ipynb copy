{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f9d64eda",
   "metadata": {},
   "source": [
    "# <center>STA 142 A Project - Kaggle Titanic Machine Learning Challenge</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c64874f",
   "metadata": {},
   "source": [
    "### Member1: Yuyan Fan \n",
    "\n",
    "### Member2:\n",
    "\n",
    "### Member3:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed4683e8",
   "metadata": {},
   "source": [
    "# I. Introduction(not done yet)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebad2a54",
   "metadata": {},
   "source": [
    "On April 15, 1912, during Titanic's maiden voyage, it sank after colliding with an iceberg. Unfortunately, there weren’t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n",
    "\n",
    "While there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n",
    "\n",
    "In this report, we will build a  model that answers the question: “what sorts of people were more likely to survive?”\n",
    "\n",
    "The dataset is from kaggle titanic competition(https://www.kaggle.com/c/titanic)\n",
    "\n",
    "In this project, we will be..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "401aa3ff",
   "metadata": {},
   "source": [
    "# II. Methodology"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fe9fe6ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1cf1be92",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the data\n",
    "train = pd.read_csv(\"train.csv\")\n",
    "test = pd.read_csv(\"test.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1f9e8188",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43b7b0e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fca5bae3",
   "metadata": {},
   "source": [
    "* There are 891 entries of data and 12 variables."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2320e22",
   "metadata": {},
   "source": [
    "### Data dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ebd16ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PassengerId</td>\n",
       "      <td>Passenger ID</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Survived</td>\n",
       "      <td>Survived or not. = No, 1 = Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Pclass</td>\n",
       "      <td>Ticket class. 1 = 1st, 2 = 2nd, 3 = 3rd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Name</td>\n",
       "      <td>Name</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sex</td>\n",
       "      <td>Sex</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Age</td>\n",
       "      <td>Age</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>SibSp</td>\n",
       "      <td>number of siblings or spouses aboard the Titanic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parch</td>\n",
       "      <td>number of parents or children aboard the Titanic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Ticket</td>\n",
       "      <td>Ticket number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Fare</td>\n",
       "      <td>Passenger fare</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Cabin</td>\n",
       "      <td>Cabin number</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Embarked</td>\n",
       "      <td>Port of Embarkation. C = Cherbourg, Q = Queens...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Variable                                        Description\n",
       "0   PassengerId                                       Passenger ID\n",
       "1      Survived                     Survived or not. = No, 1 = Yes\n",
       "2        Pclass            Ticket class. 1 = 1st, 2 = 2nd, 3 = 3rd\n",
       "3          Name                                               Name\n",
       "4           Sex                                                Sex\n",
       "5           Age                                                Age\n",
       "6         SibSp   number of siblings or spouses aboard the Titanic\n",
       "7         Parch   number of parents or children aboard the Titanic\n",
       "8        Ticket                                      Ticket number\n",
       "9          Fare                                     Passenger fare\n",
       "10        Cabin                                       Cabin number\n",
       "11     Embarked  Port of Embarkation. C = Cherbourg, Q = Queens..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = {'Variable': train.columns,\"Description\" : [\"Passenger ID\",\"Survived or not. = No, 1 = Yes\", \n",
    "                                              \"Ticket class. 1 = 1st, 2 = 2nd, 3 = 3rd\",\n",
    "                                              \"Name\",\"Sex\",\"Age\",\"number of siblings or spouses aboard the Titanic\",\n",
    "                                              \"number of parents or children aboard the Titanic\",\n",
    "                                              \"Ticket number\",\"Passenger fare\",\"Cabin number\",\n",
    "                                              \"Port of Embarkation. C = Cherbourg, Q = Queenstown, S = Southampton.\"]}\n",
    "df_dis = pd.DataFrame(data = d)\n",
    "df_dis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8c7405d",
   "metadata": {},
   "source": [
    "### Description of numeric data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ad7e4792",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46501bae",
   "metadata": {},
   "source": [
    "### Description of categorical data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cad082e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>681</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Allison, Mrs. Hudson J C (Bessie Waldo Daniels)</td>\n",
       "      <td>male</td>\n",
       "      <td>347082</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   Name   Sex  Ticket  \\\n",
       "count                                               891   891     891   \n",
       "unique                                              891     2     681   \n",
       "top     Allison, Mrs. Hudson J C (Bessie Waldo Daniels)  male  347082   \n",
       "freq                                                  1   577       7   \n",
       "\n",
       "          Cabin Embarked  \n",
       "count       204      889  \n",
       "unique      147        3  \n",
       "top     B96 B98        S  \n",
       "freq          4      644  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe(include=['O'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaf6295a",
   "metadata": {},
   "source": [
    "(Description of algorithms)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec5bd79e",
   "metadata": {},
   "source": [
    "# III. Implementation Details"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13f851f8",
   "metadata": {},
   "source": [
    "## 1. Data Preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fac3ea9",
   "metadata": {},
   "source": [
    "### Drop meaningless variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f799e47e",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train.drop(columns=['PassengerId', 'Name', 'Ticket','Cabin'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "165b706c",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = test.drop(columns=['PassengerId', 'Name', 'Ticket','Cabin'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "244de6ee",
   "metadata": {},
   "source": [
    "* PassengerId, Cabin and Ticket are ID made of random numbers, so we dropped them.\n",
    "* Name cannot make a difference to survival rate, so we dropped it as well."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94778be8",
   "metadata": {},
   "source": [
    "### Missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "124c5a79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived      0\n",
       "Pclass        0\n",
       "Sex           0\n",
       "Age         177\n",
       "SibSp         0\n",
       "Parch         0\n",
       "Fare          0\n",
       "Embarked      2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ad7a2d45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass       0\n",
       "Sex          0\n",
       "Age         86\n",
       "SibSp        0\n",
       "Parch        0\n",
       "Fare         1\n",
       "Embarked     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89d97030",
   "metadata": {},
   "source": [
    "* There are many missing values in 'Age', but we cannot simply drop the missing values, or even the variable,since that would make us lose $\\frac{177}{891}$ = 19.9% training data. \n",
    "* After doing a little research online on how to handle missing values, we decided to impute missing 'Age' with the mean of age.\n",
    "* Dropping missing values in other variables would be fine, because there are not many."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bb0001e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Age'].fillna(int(train['Age'].mean()), inplace=True)# refill na with variable mean\n",
    "test['Age'].fillna(int(test['Age'].mean()), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c4239097",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train.dropna()# drop na\n",
    "test = test.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01ec8549",
   "metadata": {},
   "source": [
    "### Data converting"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "138fc266",
   "metadata": {},
   "source": [
    "* Our algorithm cannot deal with catagorical values, so we convert them into numeric ones.\n",
    "* Sex: 1 = male; 0 = female\n",
    "* Embarked: 0 = C; 1 = Q; 2 = S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c375513c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "label = preprocessing.LabelEncoder() #make categorical variables into numeric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0319e34f",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def convert_cat(data):\n",
    "    data['Sex'] = label.fit_transform(data['Sex'])\n",
    "    data['Embarked'] = label.fit_transform(data['Embarked'])\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e6ecf702",
   "metadata": {},
   "outputs": [],
   "source": [
    "convert_cat(train)\n",
    "convert_cat(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f9cc96e",
   "metadata": {},
   "source": [
    "## 2. Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c15a5bfd",
   "metadata": {},
   "source": [
    "### Correlation between the variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9e50fc98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Survived</th>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.335549</td>\n",
       "      <td>-0.541585</td>\n",
       "      <td>-0.072699</td>\n",
       "      <td>-0.034040</td>\n",
       "      <td>0.083151</td>\n",
       "      <td>0.255290</td>\n",
       "      <td>-0.169718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pclass</th>\n",
       "      <td>-0.335549</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.127741</td>\n",
       "      <td>-0.331588</td>\n",
       "      <td>0.081656</td>\n",
       "      <td>0.016824</td>\n",
       "      <td>-0.548193</td>\n",
       "      <td>0.164681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <td>-0.541585</td>\n",
       "      <td>0.127741</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.088257</td>\n",
       "      <td>-0.116348</td>\n",
       "      <td>-0.247508</td>\n",
       "      <td>-0.179958</td>\n",
       "      <td>0.110320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>-0.072699</td>\n",
       "      <td>-0.331588</td>\n",
       "      <td>0.088257</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.232227</td>\n",
       "      <td>-0.175512</td>\n",
       "      <td>0.090736</td>\n",
       "      <td>-0.025643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SibSp</th>\n",
       "      <td>-0.034040</td>\n",
       "      <td>0.081656</td>\n",
       "      <td>-0.116348</td>\n",
       "      <td>-0.232227</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.414542</td>\n",
       "      <td>0.160887</td>\n",
       "      <td>0.068900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parch</th>\n",
       "      <td>0.083151</td>\n",
       "      <td>0.016824</td>\n",
       "      <td>-0.247508</td>\n",
       "      <td>-0.175512</td>\n",
       "      <td>0.414542</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.217532</td>\n",
       "      <td>0.040449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fare</th>\n",
       "      <td>0.255290</td>\n",
       "      <td>-0.548193</td>\n",
       "      <td>-0.179958</td>\n",
       "      <td>0.090736</td>\n",
       "      <td>0.160887</td>\n",
       "      <td>0.217532</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.226311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Embarked</th>\n",
       "      <td>-0.169718</td>\n",
       "      <td>0.164681</td>\n",
       "      <td>0.110320</td>\n",
       "      <td>-0.025643</td>\n",
       "      <td>0.068900</td>\n",
       "      <td>0.040449</td>\n",
       "      <td>-0.226311</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Survived    Pclass       Sex       Age     SibSp     Parch  \\\n",
       "Survived       NaN -0.335549 -0.541585 -0.072699 -0.034040  0.083151   \n",
       "Pclass   -0.335549       NaN  0.127741 -0.331588  0.081656  0.016824   \n",
       "Sex      -0.541585  0.127741       NaN  0.088257 -0.116348 -0.247508   \n",
       "Age      -0.072699 -0.331588  0.088257       NaN -0.232227 -0.175512   \n",
       "SibSp    -0.034040  0.081656 -0.116348 -0.232227       NaN  0.414542   \n",
       "Parch     0.083151  0.016824 -0.247508 -0.175512  0.414542       NaN   \n",
       "Fare      0.255290 -0.548193 -0.179958  0.090736  0.160887  0.217532   \n",
       "Embarked -0.169718  0.164681  0.110320 -0.025643  0.068900  0.040449   \n",
       "\n",
       "              Fare  Embarked  \n",
       "Survived  0.255290 -0.169718  \n",
       "Pclass   -0.548193  0.164681  \n",
       "Sex      -0.179958  0.110320  \n",
       "Age       0.090736 -0.025643  \n",
       "SibSp     0.160887  0.068900  \n",
       "Parch     0.217532  0.040449  \n",
       "Fare           NaN -0.226311  \n",
       "Embarked -0.226311       NaN  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = train.corr() # shows only numerical variables\n",
    "corr = corr.replace(1.0, np.nan)\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4391be34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9a3ef5cbe0>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cmap = sns.diverging_palette(10, 220, as_cmap=True)\n",
    "sns.heatmap(corr, vmin=-1.0, vmax=1.0, square=True, cmap=cmap)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8cfec8e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived   -0.541585\n",
       "Pclass     -0.548193\n",
       "Sex        -0.541585\n",
       "Age        -0.331588\n",
       "SibSp      -0.232227\n",
       "Parch      -0.247508\n",
       "Fare       -0.548193\n",
       "Embarked   -0.226311\n",
       "dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr.min() # negative correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "73647ba4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pclass Fare\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "-0.5481932852366427"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(corr.min().idxmin(), corr[corr.min().idxmin()].idxmin()) # the most negative correlation\n",
    "corr.min().min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fa9843e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SibSp Parch\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.41454163809972705"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(corr.max().idxmax(), corr[corr.max().idxmax()].idxmax()) # the most positive correlation\n",
    "corr.max().max()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b517e18",
   "metadata": {},
   "source": [
    "* Pclass and Fare are highly correlated with the negative correlation -0.54819.\n",
    "* SibSp and Parch are highly correlated with the positive correlation 0.4145."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dd09c6d",
   "metadata": {},
   "source": [
    "### Analysis on each variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "346306fd",
   "metadata": {},
   "source": [
    "### Pclass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "04a0ac7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3f092eb0>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train,x='Pclass') #histogram of Pclass Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8e804d50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass\n",
       "1    0.626168\n",
       "2    0.472826\n",
       "3    0.242363\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(by=\"Pclass\").mean().iloc[:,0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "433aea99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3f1e7f10>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 411.875x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='Pclass',hue='Survived',data=train,kind=\"count\") #histogram of Pclass based on Survival"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3aadf23",
   "metadata": {},
   "source": [
    "* It seems that around the same amount from each class survived, but more people in the $3^{rd}$ ticket class has the lowest survival rate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8411d823",
   "metadata": {},
   "source": [
    "## Sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1c70b979",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3f0d4520>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(data = train,x='Sex') #histogram of Sex Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6de72a7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3f1e7a00>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZMAAAFgCAYAAAB+GpTWAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAASW0lEQVR4nO3df8xdB13H8fdn3QARhS17hmUdMkxD3ECGq0MkRgTNqiIl6LDzB1UW5x/ToFF0EwOILpKgRkRHnDLYVBhV1FVChrM6iEoYXRyMbk4ah1vdXFtQx/xRbf36xz2Ty3i23vZ7z3Ofp32/kifPPeeee+73Cc3enHvvOTdVhSRJHSctegBJ0tpnTCRJbcZEktRmTCRJbcZEktR28qIH6Ni8eXPdeOONix5Dkh5LFj3ASljTRyYHDhxY9AiSJNZ4TCRJq4MxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUtuavgS9tJqc/9rrFj3Cirr1La9a9AhaRTwykSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUpsxkSS1GRNJUtvoMUmyLsnfJnn/sHxakpuSfGr4ferUtlck2ZPkriQXjj2bJGk+VuLI5DXAnVPLlwM7q2ojsHNYJsk5wFbgXGAzcFWSdSswnySpadSYJNkAfAfwO1OrtwDXDrevBV4+tf76qjpYVXcDe4ALxpxPkjQfYx+Z/Brw08D/Tq17alXdDzD8PmNYfyZw79R2e4d1kqRVbrSYJHkpsK+qbp31Icusq2X2e2mSXUl27d+/vzWjJGk+xjwyeSHwsiSfBq4HXpzk94AHkqwHGH7vG7bfC5w19fgNwH2P3GlVXV1Vm6pq09LS0ojjS5JmNVpMquqKqtpQVc9g8sb6X1TV9wM7gG3DZtuAG4bbO4CtSR6f5GxgI3DLWPNJkubn5AU855uB7UkuAe4BLgKoqt1JtgN3AIeAy6rq8ALmkyQdpRWJSVXdDNw83P4M8JJH2e5K4MqVmEmSND+eAS9JajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqQ2YyJJajMmkqS20WKS5AlJbkny8SS7k/z8sP60JDcl+dTw+9Spx1yRZE+Su5JcONZskqT5GvPI5CDw4qp6LnAesDnJ1wOXAzuraiOwc1gmyTnAVuBcYDNwVZJ1I84nSZqT0WJSEw8Ni6cMPwVsAa4d1l8LvHy4vQW4vqoOVtXdwB7ggrHmkyTNz6jvmSRZl+Q2YB9wU1V9FHhqVd0PMPw+Y9j8TODeqYfvHdY9cp+XJtmVZNf+/fvHHF+SNKNRY1JVh6vqPGADcEGSZz/G5lluF8vs8+qq2lRVm5aWluY1qiSpYUU+zVVV/wrczOS9kAeSrAcYfu8bNtsLnDX1sA3AfSsxnySpZ8xPcy0lecpw+0uAbwH+DtgBbBs22wbcMNzeAWxN8vgkZwMbgVvGmk+SND8nj7jv9cC1wyeyTgK2V9X7k3wE2J7kEuAe4CKAqtqdZDtwB3AIuKyqDo84nyRpTkaLSVV9AnjeMus/A7zkUR5zJXDlWDNJksbhGfCSpDZjIklqMyaSpDZjIklqMyaSpDZjIklqMyaSpDZjIklqMyaSpDZjIklqMyaSpDZjIklqMyaSpDZjIklqMyaSpDZjIklqMyaSpLaZYpJk5yzrJEknpsf82t4kTwCeCJye5FQgw11fDjxt5NkkSWvEkb4D/keAH2cSjlv5fEweBH5zxLkkSWvIY8akqt4KvDXJj1XV21ZoJknSGnOkIxMAquptSb4BeMb0Y6rqupHmkiStITPFJMnvAl8F3AYcHlYXYEwkSbPFBNgEnFNVNeYwkqS1adbzTD4JfMWYg0jSiSbJ65LsTvKJJLclef4c9vmyJJfPab6HZt121iOT04E7ktwCHHx4ZVW97ChnkyQBSV4AvBT42qo6mOR04HEzPvbkqjq03H1VtQPYMb9JZzNrTN445hCSdAJaDxyoqoMAVXUAIMmngU1VdSDJJuCXq+pFSd7I5DSNZwAHknwV8Oqq2j087mbgJ4HnMHlr4nXAx4FnVtX/JnkicBfwTODpTE7vWAL+A/jhqvq7JGcD72bShhuP5o+Z6WWuqvrQcj9H80SSpC/wZ8BZSf4+yVVJvmmGx5wPbKmq7wWuB14JkGQ98LSquvXhDavq35jE5OH9fifwwar6H+Bq4Meq6nzgp4Crhm3eCry9qr4O+Oej+WNmvZzK55I8OPz8V5LDSR48mieSJH1eVT3EJA6XAvuB9yb5wSM8bEdV/edweztw0XD7lcAfLLP9e4HvGW5vHZ7jScA3AH+Q5Dbgt5gcJQG8EHjPcPt3j+bvmfU8ky+bXk7ycuCCo3kiSdIXqqrDwM3AzUluB7YBh/j8/9F/wiMe8u9Tj/2nJJ9J8jVMgvEjyzzFDuCXkpzGJFx/AXwp8K9Vdd6jjXUsf8sxXTW4qv4EePGxPFaSBEmelWTj1KrzgH8EPs3kP/wA33WE3VwP/DTw5Kq6/ZF3Dkc/tzB5+er9VXW4qh4E7k5y0TBHkjx3eMhfMzmCAfi+o/l7Zj1p8RVTiycxeXPHc04k6dg9CXhbkqcwORrZw+Qlr68G3pHkZ4GPHmEff8gkFL/wGNu8l8lLYC+aWvd9wNuT/BxwCpMofRx4DfDuJK8B3nc0f0xmOQ8xyTunFg8xKedvV9W+o3myedu0aVPt2rVrkSNI/+/8155YF4S49S2vWvQIa0WOvMnaN+t7Jj809iCSpLVr1k9zbUjyx0n2JXkgyfuSbBh7OEnS2jDrG/DvZPKpgKcBZwJ/OqyTJGnmmCxV1Tur6tDw8y4mZ05KkjTz5VQOJPl+Pn8yy8XAZ8YZSWO4503PWfQIK+bpr/+iT0hKGtmsRyavZnKG5T8D9wPfDfimvCQJmD0mvwBsq6qlqjqDSVzeONpUkqQVkWRzkruS7Olcun7Wl7m+pqr+5eGFqvpskucd65NKkr7Q+a+9bq4ngt/6llcd8fyWJOuYXD34W4G9wMeS7KiqO472+WY9MjkpyalTA5zG7CGSJK1OFwB7quofquq/mZwJv+VYdjRrEH4F+Jskf8jkMiqvBK48lieUJK0aZwL3Ti3vBY7p2x5nPQP+uiS7mFzcMcArjuUwSJK0qiz3Utgxvdw280tVQzwMiCQdP/YCZ00tbwDuO5YdHdMl6CVJx4WPARuTnJ3kcUwuP39M3x/vm+iSdIKqqkNJfhT4ILAOuObh75Q/WsZEklaBWT7KO4aq+gDwge5+fJlLktRmTCRJbcZEktRmTCRJbcZEktQ2WkySnJXkL5PcmWR3ktcM609LclOSTw2/p6/5dcVw5cq7klw41mySpPka88jkEPCTVfXVwNcDlyU5B7gc2FlVG4GdwzLDfVuBc4HNwFXDFS0lSSNIck2SfUk+2d3XaOeZVNX9TL5Ii6r6XJI7mVxUbAvwomGza4GbgZ8Z1l9fVQeBu5PsYXJFy4+MNaMkrRb3vOk5c70E/dNff/ss5628C/gN4Lru863IeyZJngE8D/go8NQhNA8H54xhs+WuXnnmSswnSSeiqvow8Nl57Gv0mCR5EvA+4Mer6sHH2nSZdV9U6iSXJtmVZNf+/fvnNaYkqWHUmCQ5hUlIfr+q/mhY/UCS9cP964F9w/qZrl5ZVVdX1aaq2rS0tDTe8JKkmY35aa4A7wDurKpfnbprB7BtuL0NuGFq/dYkj09yNrARuGWs+SRJ8zPmhR5fCPwAcHuS24Z1Pwu8Gdie5BLgHuAigKranWQ7k+9MOQRcVlWHR5xPkjQnY36a669Y/n0QgJc8ymOuxK8DlqQVkeQ9TD5de3qSvcAbquodx7IvL0EvSavAjB/lnauqunhe+/JyKpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKkNmMiSWozJpKktpMXPYCktemeNz1n0SOsmKe//vZFj7DqeWQiSWobLSZJrkmyL8knp9adluSmJJ8afp86dd8VSfYkuSvJhWPNJUmavzGPTN4FbH7EusuBnVW1Edg5LJPkHGArcO7wmKuSrBtxNknSHI0Wk6r6MPDZR6zeAlw73L4WePnU+uur6mBV3Q3sAS4YazZJ0nyt9HsmT62q+wGG32cM688E7p3abu+w7oskuTTJriS79u/fP+qwkqTZrJY34LPMulpuw6q6uqo2VdWmpaWlkceSJM1ipWPyQJL1AMPvfcP6vcBZU9ttAO5b4dkkScdopWOyA9g23N4G3DC1fmuSxyc5G9gI3LLCs0mSjtFoJy0meQ/wIuD0JHuBNwBvBrYnuQS4B7gIoKp2J9kO3AEcAi6rqsNjzSZJmq/RYlJVFz/KXS95lO2vBK4cax5J0nhWyxvwkqQ1zJhIktqMiSSpzZhIktqMiSSpzZhIktpO2C/HOv+11y16hBX1x1+26AkkHc88MpEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEktRkTSVKbMZEkta26mCTZnOSuJHuSXL7oeSRJR7aqYpJkHfCbwLcB5wAXJzlnsVNJko5kVcUEuADYU1X/UFX/DVwPbFnwTJKkIzh50QM8wpnAvVPLe4HnT2+Q5FLg0mHxoSR3rdBsa9pXwunAgUXPsSLekEVPcELw39TMbqyqzfMaZbVabTFZ7n+x+oKFqquBq1dmnONHkl1VtWnRc+j44b8pTVttL3PtBc6aWt4A3LegWSRJM1ptMfkYsDHJ2UkeB2wFdix4JknSEayql7mq6lCSHwU+CKwDrqmq3Qse63jhS4OaN/9N6f+lqo68lSRJj2G1vcwlSVqDjIkkqc2YHOe8PI3mKck1SfYl+eSiZ9HqYkyOY16eRiN4F3Dcn4Cno2dMjm9enkZzVVUfBj676Dm0+hiT49tyl6c5c0GzSDqOGZPj2xEvTyNJ82BMjm9enkbSijAmxzcvTyNpRRiT41hVHQIevjzNncB2L0+jjiTvAT4CPCvJ3iSXLHomrQ5eTkWS1OaRiSSpzZhIktqMiSSpzZhIktqMiSSpzZjohJPkdUl2J/lEktuSPH/RM0lr3ar62l5pbEleALwU+NqqOpjkdOBxCx5LWvM8MtGJZj1woKoOAlTVgaq6L8n5ST6U5NYkH0yyPsmTh++CeRZMTthL8sMLnV5apTxpUSeUJE8C/gp4IvDnwHuBvwE+BGypqv1Jvge4sKpeneRbgTcBbwV+sKr8Lg9pGb7MpRNKVT2U5HzgG4FvZhKTXwSeDdyUBGAdcP+w/U1JLmLyJWPPXcjQ0hrgkYlOaEm+G7gMeEJVvWCZ+09ictRyNvDtVfWJFR5RWhN8z0QnlCTPSrJxatV5TC6CuTS8OU+SU5KcO9z/E8P9FwPXJDllRQeW1giPTHRCGV7iehvwFOAQsAe4lMl3vfw68GQmL//+GpMjkhuAC6rqc0l+FfhcVb1hEbNLq5kxkSS1+TKXJKnNmEiS2oyJJKnNmEiS2oyJJKnNmEiS2oyJJKnt/wC5iyQbQVy9vgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 411.875x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='Sex',hue='Survived',data=train,kind=\"count\") #histogram of Sex based on Survival"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b9def93",
   "metadata": {},
   "source": [
    "* Females had a higher proportion of survival."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fef292d",
   "metadata": {},
   "source": [
    "## Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "62752099",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3b735a30>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAFgCAYAAACFYaNMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUdElEQVR4nO3df7Dcd13v8eeLFopQhFbSTppmTNGA/eElwLECdRSoSmAYC9piMor5A2+doVypMtxpdcYf43QGR0QcR9AIlarYGqBIrVioseJ45w7ltBZIGgK5trZpQnMKXos2U0369o/9xm7T02RNzvf72Zx9PmbO7O5nv3v2NdvNq3s++/1+vqkqJEnDe1rrAJI0qyxgSWrEApakRixgSWrEApakRk5uHeB4rF+/vm655ZbWMSTpaLLY4An9Cfihhx5qHUGSjllvBZxkdZLbkuxIsj3JO7rxX0nyQJK7up/Xjz3m6iS7kuxM8tq+sknSNOhzCuIA8M6qujPJc4A7ktza3fdbVfWe8Y2TnAdsAM4HzgL+OskLq+pgjxklqZnePgFX1d6qurO7/k1gB7DqCA+5BLihqh6tqnuAXcCFfeWTpNYGmQNOsgZ4CfC5bujtSb6Y5Nokp3Vjq4D7xx62m0UKO8nlSeaTzC8sLPSYWpL61XsBJzkV+DhwZVU9DHwA+A5gHbAX+M1Dmy7y8CctVFFVm6tqrqrmVqxY0VNqSepfrwWc5OmMyvcjVXUjQFU9WFUHq+ox4A94fJphN7B67OFnA3v6zCdJLfW5F0SADwE7quq9Y+MrxzZ7E7Ctu34TsCHJKUnOAdYCt/eVT5Ja63MviIuAtwBfSnJXN/YLwMYk6xhNL9wL/AxAVW1PsgW4m9EeFFe4B4Sk5Swn8nrAc3NzNT8/3zqGJB3N8jsSTpJOZBawJDViAUtSIxawJDVyQi9Hqen2wnPPZ8+eB464zVlnreIrO7YPlEiaLhawerNnzwO84Tf+6ojb3Pyu1w2URpo+TkFIUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ1YgFLUiMWsCQ10lsBJ1md5LYkO5JsT/KObvz0JLcm+Wp3edrYY65OsivJziSv7SubJE2DPj8BHwDeWVXnAi8HrkhyHnAVsLWq1gJbu9t0920AzgfWA+9PclKP+SSpqd4KuKr2VtWd3fVvAjuAVcAlwHXdZtcBb+yuXwLcUFWPVtU9wC7gwr7ySVJrg8wBJ1kDvAT4HHBmVe2FUUkDZ3SbrQLuH3vY7m7s8N91eZL5JPMLCwt9xpakXvVewElOBT4OXFlVDx9p00XG6kkDVZuraq6q5lasWLFUMSVpcL0WcJKnMyrfj1TVjd3wg0lWdvevBPZ147uB1WMPPxvY02c+SWqpz70gAnwI2FFV7x276yZgU3d9E/DJsfENSU5Jcg6wFri9r3yS1NrJPf7ui4C3AF9Kclc39gvAu4EtSd4K3AdcBlBV25NsAe5mtAfFFVV1sMd8ktRUbwVcVX/P4vO6ABc/xWOuAa7pK5MkTROPhJOkRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRixgSWrEApakRnor4CTXJtmXZNvY2K8keSDJXd3P68fuuzrJriQ7k7y2r1ySNC36/AT8YWD9IuO/VVXrup9PASQ5D9gAnN895v1JTuoxmyQ111sBV9XfAd+YcPNLgBuq6tGqugfYBVzYVzZJmgYt5oDfnuSL3RTFad3YKuD+sW12d2NPkuTyJPNJ5hcWFvrOKkm9GbqAPwB8B7AO2Av8ZjeeRbatxX5BVW2uqrmqmluxYkU/KSVpAIMWcFU9WFUHq+ox4A94fJphN7B6bNOzgT1DZpOkoQ1awElWjt18E3BoD4mbgA1JTklyDrAWuH3IbJI0tJP7+sVJrgdeBTw/yW7gl4FXJVnHaHrhXuBnAKpqe5ItwN3AAeCKqjrYVzZJmga9FXBVbVxk+ENH2P4a4Jq+8kjStPFIOElqxAKWpEYsYElqxAKWpEYsYElqxAKWpEYsYElqxAKWpEYsYElqxAKWpEYmKuAkF00yJkma3KSfgH9nwjFJ0oSOuBhPklcArwRWJPn5sbu+FfCcbZJ0HI62GtozgFO77Z4zNv4wcGlfoSRpFhyxgKvqs8Bnk3y4qv5poEySNBMmXQ/4lCSbgTXjj6mq1/QRSpJmwaQF/FHg94APAp6pQpKWwKQFfKCqPtBrEkmaMZPuhvYXSd6WZGWS0w/99JpMkpa5ST8Bb+ou3zU2VsALljaOJM2OiQq4qs7pO4gkzZqJCjjJTy02XlV/tLRxJGl2TDoF8T1j158JXAzcCVjAknSMJp2C+F/jt5M8F/jjXhJJ0ow41uUoHwHWLmUQSZo1k84B/wWjvR5gtAjPucCWvkJJ0iyYdA74PWPXDwD/VFW7e8gjSTNjoimIblGeLzNaEe004N/7DCVJs2DSM2K8GbgduAx4M/C5JC5HKUnHYdIpiF8Evqeq9gEkWQH8NfCxvoJJ0nI36V4QTztUvp2v/zceK0laxKSfgG9J8mng+u72jwOf6ieSJM2Go50T7juBM6vqXUl+FPg+IMD/BT4yQD5JWraONo3wPuCbAFV1Y1X9fFX9HKNPv+/rO5wkLWdHK+A1VfXFwwerap7R6YkkScfoaAX8zCPc9y1LGUSSZs3RCvjzSf7n4YNJ3grc0U8kSZoNR9sL4krgE0l+gscLdw54BvCmPoNJ0nJ3xAKuqgeBVyZ5NXBBN/yXVfU3vSeTpGVu0vWAbwNu6zmLJM0Uj2aTpEYsYElqxAKWpEYsYElqxAKWpEYsYElqxAKWpEYsYElqxAKWpEYsYElqxAKWpEYsYElqpLcCTnJtkn1Jto2NnZ7k1iRf7S5PG7vv6iS7kuxM8tq+cknStOjzE/CHgfWHjV0FbK2qtcDW7jZJzgM2AOd3j3l/kpN6zCZJzfVWwFX1d8A3Dhu+BLiuu34d8Max8Ruq6tGqugfYBVzYVzZJmgZDzwGfWVV7AbrLM7rxVcD9Y9vt7saeJMnlSeaTzC8sLPQaVpL6NC1fwmWRsVpsw6raXFVzVTW3YsWKnmNJUn+GLuAHk6wE6C73deO7gdVj250N7Bk4myQNaugCvgnY1F3fBHxybHxDklOSnAOsBW4fOJskDWqic8IdiyTXA68Cnp9kN/DLwLuBLd1p7e8DLgOoqu1JtgB3AweAK6rqYF/ZJGka9FbAVbXxKe66+Cm2vwa4pq88kjRtpuVLOEmaORawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDVycusAmj4vPPd89ux54IjbnHXWKr6yY/tAiaTlyQLWk+zZ8wBv+I2/OuI2N7/rdQOlkZYvpyAkqRELWJIasYAlqRELWJIasYAlqRELWJIasYAlqRELWJIa8UCMGTPJUW77H9k/UBpptlnAM2aSo9y2vO0HBkojzTanICSpEQtYkhpxCkJN7d//KKc+93lH3MaV17RcWcBqqh476MprmllOQUhSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSIxawJDViAUtSI02OhEtyL/BN4CBwoKrmkpwO/BmwBrgXeHNV/XOLfJI0hJafgF9dVeuqaq67fRWwtarWAlu725K0bE3TFMQlwHXd9euANzbMIkm9a1XABXwmyR1JLu/GzqyqvQDd5RmLPTDJ5Unmk8wvLCwMFFeSll6r1dAuqqo9Sc4Abk3y5UkfWFWbgc0Ac3Nz1VdASepbk0/AVbWnu9wHfAK4EHgwyUqA7nJfi2ySNJTBCzjJs5M859B14IeBbcBNwKZus03AJ4fOJklDajEFcSbwiSSHnv9Pq+qWJJ8HtiR5K3AfcFmDbDpBTXK2Z8+soWkzeAFX1T8CL15k/OvAxUPn0fIwydmePbOGps007YYmSTPFApakRixgSWrEApakRjwtvY7J/v2Pcupzn3fkbR7ZP1Aa6cRkAeuY1GMHj7rXwZa3/cBAaaQTk1MQktSIBSxJjTgFsYxMcjSY87LS9LCAl5FJjgZzXlaaHhawZsYke264XoSGZAFrZkyy54brRWhIfgknSY1YwJLUiAUsSY04B6yp52HPWq4sYE09D3vWcuUUhCQ1YgFLUiMzOQXhCRwlTYOZLOAT8QSOrvMgLT8zWcAnItd5mC7+FaWlYAFLx+BE/CtK08cv4SSpEQtYkhqxgCWpEQtYkhqxgCWpEQtYkhpxNzRpzCQrr8FkB714CiQdjQUsjZlk5TWY7KAXT4Gko3EKQpIasYAlqRELWJIasYAlqRG/hJMack+J2WYBSw25p8Rss4ClZcD1iU9MFvBTWKo/Df2HoeM1yXtx/yP7uex3//aI2/hJevpYwE9hqf40dOFuHa9J3oueDeXE5F4QktSIBSxJjVjAktSIc8DHYdIvRyRpMRbwcfDLES037rUzLAtY0n9xr51hWcDSjFiqKTMPn146FrA0I5ZqyszDp5eOe0FIUiN+ApY0tZb7l4IWsKQlt1TzxMv9S0ELeAq4P7GWG+eJJzN1BZxkPfDbwEnAB6vq3Y0j9c79iaXZNFVfwiU5Cfhd4HXAecDGJOe1TSVJ/Zi2T8AXAruq6h8BktwAXALc3TSVpKl1Iq/dnapasl92vJJcCqyvqp/ubr8F+N6qevvYNpcDl3c3XwTs/G88xfOBh5Yo7vGalizmeCJzPJE5nuhYczxUVesPH5y2T8BZZOwJ/4eoqs3A5mP65cl8Vc0dy2OX2rRkMYc5zNEux1TNAQO7gdVjt88G9jTKIkm9mrYC/jywNsk5SZ4BbABuapxJknoxVVMQVXUgyduBTzPaDe3aqlrKQ1yOaeqiJ9OSxRxPZI4nMscTLWmOqfoSTpJmybRNQUjSzLCAJamRmSngJOuT7EyyK8lVAz7vtUn2Jdk2NnZ6kluTfLW7PG2AHKuT3JZkR5LtSd7RIkuSZya5PckXuhy/2iLHWJ6TkvxDkptb5Uhyb5IvJbkryXzDHM9L8rEkX+7eJ69o8P54Ufc6HPp5OMmVjV6Pn+veo9uSXN+9d5c0x0wUcONDnD8MHL4D9lXA1qpaC2ztbvftAPDOqjoXeDlwRfcaDJ3lUeA1VfViYB2wPsnLG+Q45B3AjrHbrXK8uqrWje1j2iLHbwO3VNV3AS9m9LoMmqOqdnavwzrgZcAjwCeGzpFkFfCzwFxVXcBop4ANS56jqpb9D/AK4NNjt68Grh7w+dcA28Zu7wRWdtdXAjsbvCafBH6oZRbgWcCdwPe2yMFoP/OtwGuAm1v9twHuBZ5/2NigOYBvBe6h+2K+VY7DnvuHgf/T6PVYBdwPnM5ob7GbuzxLmmMmPgHz+It5yO5urJUzq2ovQHd5xpBPnmQN8BLgcy2ydH/23wXsA26tqiY5gPcB/xt4bGysRY4CPpPkju5Q+xY5XgAsAH/YTcl8MMmzG+QYtwG4vrs+aI6qegB4D3AfsBf4l6r6zFLnmJUCPuohzrMiyanAx4Erq+rhFhmq6mCN/sQ8G7gwyQVDZ0jyBmBfVd0x9HMv4qKqeimjKbIrknx/gwwnAy8FPlBVLwH+jeGmX56kOxDrR4CPNnr+0xgtBHYOcBbw7CQ/udTPMysFPG2HOD+YZCVAd7lviCdN8nRG5fuRqrqxZRaAqvr/wN8ymiMfOsdFwI8kuRe4AXhNkj9pkIOq2tNd7mM033lhgxy7gd3dXyMAH2NUyK3eH68D7qyqB7vbQ+f4QeCeqlqoqv8AbgReudQ5ZqWAp+0Q55uATd31TYzmY3uVJMCHgB1V9d5WWZKsSPK87vq3MHqjf3noHFV1dVWdXVVrGL0f/qaqfnLoHEmeneQ5h64zmmfcNnSOqvoacH+SF3VDFzNaBnbw92pnI49PP9Agx33Ay5M8q/u3czGjLyWXNsdQE+qtf4DXA18B/h/wiwM+7/WM5pD+g9GnjLcC38boy5+vdpenD5Dj+xhNu3wRuKv7ef3QWYD/AfxDl2Mb8Evd+OCvyVimV/H4l3BDvx4vAL7Q/Ww/9N5s9B5ZB8x3/23+HDitUY5nAV8Hnjs21iLHrzL6cLAN+GPglKXO4aHIktTIrExBSNLUsYAlqRELWJIasYAlqRELWJIasYA1c5K8KUkl+a7WWTTbLGDNoo3A3zM6AENqxgLWTOnWwriI0QExG7qxpyV5f7f2681JPpXk0u6+lyX5bLdQzqcPHYYqLQULWLPmjYzWvP0K8I0kLwV+lNGSod8N/DSj5UsPrZ3xO8ClVfUy4FrgmhahtTxN1VmRpQFsZLQMJYwW4dkIPB34aFU9BnwtyW3d/S8CLgBuHS0HwEmMDiuXloQFrJmR5NsYLb5+QZJiVKjFaAWyRR8CbK+qVwwUUTPGKQjNkkuBP6qqb6+qNVW1mtFZIB4CfqybCz6T0eI8MDr7wYok/zUlkeT8FsG1PFnAmiUbefKn3Y8zWnB7N6NVr36f0ZlC/qWq/p1Raf96ki8wWkHulcPF1XLnamgSo70jqupfu2mK2xmdpeJrrXNpeXMOWBq5uVso/hnAr1m+GoKfgCWpEeeAJakRC1iSGrGAJakRC1iSGrGAJamR/wRDmdZ9oCbFkQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train,x='Age') #histogram of Sex Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ff0be974",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9a3f784760>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Survived',y='Age', data = train) #box plot of Age separated by whether they survived or not"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09ae08bb",
   "metadata": {},
   "source": [
    "* Both of the boxplots look similar to one another. But if we divide age into different age groups, the survival rate of different groups vary and the differences are noticeable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ad746bff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3f855d60>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 762.375x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#sns.scatterplot(x='Age', y='Survived', data=new_train,hue='Pclass', style='Sex')\n",
    "sns.catplot(y='Age',x='Survived',col='Sex',hue='Pclass',data=train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b5bc209a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert age into groups\n",
    "def conv_age(data):\n",
    "    res = []\n",
    "    for i in data:\n",
    "        if i <= 20:\n",
    "            res.append(0)\n",
    "        elif i <= 40:\n",
    "            res.append(1)\n",
    "        elif i <= 65:\n",
    "            res.append(2)\n",
    "        else:\n",
    "            res.append(3)\n",
    "    return res     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "102a2c7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Age'] = conv_age(test['Age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d89be9a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Age'] = conv_age(train['Age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "446cabc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3f704eb0>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 411.875x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='Age',hue='Survived',data=train,kind=\"count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "93c3d923",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age\n",
       "0    0.458101\n",
       "1    0.363636\n",
       "2    0.375887\n",
       "3    0.125000\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(by=\"Age\").mean().iloc[:,0] # survival rate for age groups"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5b9d73c",
   "metadata": {},
   "source": [
    "* Group 3(65+ year old) has the lowest survival rate. Elder people are less likely to survive the harsh environment.\n",
    "* Group 1(0-20 year old) has the highest survival rate. When emegency happens, people tend to let young people go first."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b90b6c82",
   "metadata": {},
   "source": [
    "## Fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "0b5a7d36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3b735310>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train,x='Fare') #histogram of Fare Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "eb416bb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9a40038430>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Survived',y='Fare', data = train) #box plot of Fare separated by whether they survived or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a0cc0434",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived\n",
       "0    0.329690\n",
       "1    0.467647\n",
       "Name: Parch, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(by=\"Survived\").mean().iloc[:,4] # average fare for survived and not "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc95e86a",
   "metadata": {},
   "source": [
    "Survival seems to favor the higher fares."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2497cdc",
   "metadata": {},
   "source": [
    "## Embarked\n",
    "0 = C; 1 = Q; 2 = S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4dabf808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a3f855bb0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train,x='Embarked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0c33bfed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a401fd0a0>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 411.875x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='Embarked',hue='Survived',data = train,kind=\"count\") #histogram of Embarked based on Survival"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "87bc3389",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Embarked\n",
       "0    0.553571\n",
       "1    0.389610\n",
       "2    0.336957\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(by=\"Embarked\").mean().iloc[:,0] # Embarked and survival rate"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c554959d",
   "metadata": {},
   "source": [
    "The only significant difference in proportion is when the Port of Embarkation was in Cherbourg, and it has higher survival rate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "152a8d63",
   "metadata": {},
   "source": [
    "## Sibsp and Parch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9316040e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a404553a0>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train,x='SibSp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f8d93e5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a401d1d30>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.displot(train,x='Parch')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b94c815",
   "metadata": {},
   "source": [
    "* parch and sibsp are all number of family, so we can sum them up."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7540bba7",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['family'] = train['SibSp'] + train['Parch']\n",
    "test['family'] = test['SibSp']+test['Parch']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "54da49b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = test.drop(columns=['Parch','SibSp'])\n",
    "train = train.drop(columns=['Parch','SibSp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "aa2682cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived\n",
       "0    22.117887\n",
       "1    48.209498\n",
       "Name: Fare, dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(by=\"Survived\").mean().iloc[:,3] # average family size for survived and not survived passenger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "4dc2a0ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "family\n",
       "0     0.300935\n",
       "1     0.552795\n",
       "2     0.578431\n",
       "3     0.724138\n",
       "4     0.200000\n",
       "5     0.136364\n",
       "6     0.333333\n",
       "7     0.000000\n",
       "10    0.000000\n",
       "Name: Survived, dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby(by=\"family\").mean().iloc[:,0] # family size and survival rate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "75b50224",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7f9a407d5ca0>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 411.875x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x='family',hue='Survived',data = train,kind=\"count\") "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "696aff6b",
   "metadata": {},
   "source": [
    "* It seems that being alone is related to lower survival rate.\n",
    "* But larger family size doesn't mean higher survival rate. Having a family of 3 seems to be the best one."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15121329",
   "metadata": {},
   "source": [
    "### Interpretation:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26cfd59d",
   "metadata": {},
   "source": [
    "## 3. Building models\n",
    "Instead of using Python package, we will build our own functions. This is the biggest challenge of our project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "ab89266f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = train.iloc[:,1:7]\n",
    "y = train.iloc[:,0]\n",
    "x_test = test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ff96988",
   "metadata": {},
   "source": [
    "### Logstic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "32ecf378",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def fit(x, y,learning_rate,iterations): \n",
    "    m,n = x.shape\n",
    "    weight = np.zeros(n)\n",
    "    b0 = 0\n",
    "    for i in range(iterations): \n",
    "        y_hat = sigmoid(np.dot(x, weight) + b0)\n",
    "        loss = -1/m * np.sum(y * np.log(y_hat)) + (1 - y) * np.log(1-y_hat)# loos function\n",
    "        dW = 1/m * np.dot(x.T, (y_hat - y))\n",
    "        db = 1/m * np.sum(y_hat - y)\n",
    "        weight = weight - learning_rate * dW# update parameters\n",
    "        b0 = b0 - learning_rate * db \n",
    "    return weight, b0\n",
    "\n",
    "def sigmoid(input):    \n",
    "    output = 1 / (1 + np.exp(-input))\n",
    "    return output"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caa897ad",
   "metadata": {},
   "source": [
    "* learning_rate = 0.02, iteration = 1000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "aa5ec2f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-49-9fdad0dc98f3>:7: RuntimeWarning: divide by zero encountered in log\n",
      "  loss = -1/m * np.sum(y * np.log(y_hat)) + (1 - y) * np.log(1-y_hat)# loos function\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([-0.11632947, -1.63038494, -0.45022516,  0.29837101, -0.19167158,\n",
       "        -0.54339937]),\n",
       " 0.0838030803327668)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit(x, y,0.02,1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "71510113",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-49-9fdad0dc98f3>:7: RuntimeWarning: divide by zero encountered in log\n",
      "  loss = -1/m * np.sum(y * np.log(y_hat)) + (1 - y) * np.log(1-y_hat)# loos function\n"
     ]
    }
   ],
   "source": [
    "parameter = fit(x, y,0.02,1000)\n",
    "expression = np.dot(x_test, parameter[0]) + parameter[1]\n",
    "predict = sigmoid(expression) >= 1/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "abd1e415",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = []\n",
    "for i in predict:\n",
    "    if i == True:\n",
    "        result.append(1)\n",
    "    else:\n",
    "        result.append(0)\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2880fa7d",
   "metadata": {},
   "source": [
    "* learning_rate = 0.02, iteration = 500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "d6f3534d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-49-9fdad0dc98f3>:7: RuntimeWarning: divide by zero encountered in log\n",
      "  loss = -1/m * np.sum(y * np.log(y_hat)) + (1 - y) * np.log(1-y_hat)# loos function\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([-0.29728889, -0.97797396, -0.35747675,  0.2061635 , -0.27721924,\n",
       "        -0.46041965]),\n",
       " -0.057859052121414435)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fit(x, y,0.02,500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "01e4c695",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-49-9fdad0dc98f3>:7: RuntimeWarning: divide by zero encountered in log\n",
      "  loss = -1/m * np.sum(y * np.log(y_hat)) + (1 - y) * np.log(1-y_hat)# loos function\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1,\n",
       " 0,\n",
       " 0,\n",
       " 1]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameter = fit(x, y,0.02,500)\n",
    "expression = np.dot(x_test, parameter[0]) + parameter[1]\n",
    "predict = sigmoid(expression) >= 1/2\n",
    "result = []\n",
    "for i in predict:\n",
    "    if i == True:\n",
    "        result.append(1)\n",
    "    else:\n",
    "        result.append(0)\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77c648f2",
   "metadata": {},
   "source": [
    "### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "abb9286f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_svm_train = pd.DataFrame(sc.fit_transform(x))\n",
    "x_svm_test = pd.DataFrame(sc.transform(x_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "ea78cd1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# want all variables in the same range so we have to normalize the data\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "93892b14",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import svm\n",
    "#create a classifier\n",
    "cls = svm.SVC(kernel=\"linear\")\n",
    "#train the model\n",
    "cls.fit(x_svm_train,y)\n",
    "#predict the response\n",
    "pred = cls.predict(x_svm_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "466f2a24",
   "metadata": {},
   "source": [
    "### K-Nearest Neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "3b155b29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier()"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn_model = KNeighborsClassifier(n_neighbors=5)\n",
    "knn_model.fit(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "4085f31f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = knn_model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "6a7a5f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "k = 5\n",
    "num, feat = x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "6ef39320",
   "metadata": {},
   "outputs": [],
   "source": [
    "def knn_predict(x_test):\n",
    "    num_test, feat = x_test.shape\n",
    "    y_pred = np.zeros(num_test)\n",
    "    for i in range(num_test) :\n",
    "        x = x_test[i]\n",
    "        # find the K nearest neighbors from current test example \n",
    "        neigh = np.zeros(k)\n",
    "        neigh = find_neighbors(x)\n",
    "        # most frequent class in K neighbors\n",
    "        y_pred[i] = mode(neigh)[0][0]    \n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "943da33d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_neighbors(x_):\n",
    "    # calculate all the euclidean distances between current       \n",
    "    euclidean_distances = np.zeros(num)\n",
    "          \n",
    "    for i in range(num) :\n",
    "        d = euclidean( x_, x[i] )\n",
    "        euclidean_distances[i] = d\n",
    "          \n",
    "    # sort Y_train according to euclidean_distance_array and \n",
    "    # store into Y_train_sorted\n",
    "          \n",
    "    inds = euclidean_distances.argsort()\n",
    "          \n",
    "    y_train_sorted = y[inds]\n",
    "          \n",
    "    return y_train_sorted[:k]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "ccd988ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "def euclidean(x_, x) :\n",
    "    return np.sqrt(np.sum(np.square(x_ - x)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "e70e0c21",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "0",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 0",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-206-f1d0e79ed7a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mknn_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-204-cc072dc7b3df>\u001b[0m in \u001b[0;36mknn_predict\u001b[0;34m(x_test)\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_test\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0;31m# find the K nearest neighbors from current test example\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mneigh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2798\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2799\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2800\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2801\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 0"
     ]
    }
   ],
   "source": [
    "y_pred = knn_predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61e83555",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
